1.
Python is an object-oriented, high-level programming language with dynamic semantics that is interpreted. Its high-level built-in data structures, paired with dynamic typing and dynamic binding, making it ideal for Rapid Application Development as well as as a scripting or glue language for connecting existing components. Python's concise, easy-to-learn syntax prioritizes readability, which lowers software maintenance costs. Modules and packages are supported by Python, which fosters program modularity and code reuse. The Python interpreter and its substantial standard library are free to download and distribute in source or binary form for all major platforms.
Python is popular among programmers because of the enhanced productivity it offers. The edit-test-debug cycle is extraordinarily rapid because there is no compilation step. Python scripts are simple to debug: a bug or improper input will never result in a segmentation fault. Instead, when the interpreter finds a mistake, it throws an exception. The interpreter prints a stack trace if the application fails to catch the exception. Inspection of local and global variables, execution of arbitrary expressions, setting breakpoints, stepping through the code one line at a time, and so on are all possible with a source level debugger. The debugger is written in Python, demonstrating Python's introspective capabilities. On the other hand, adding a few print statements to the source code is frequently the quickest method to debug a program: the fast edit-test-debug cycle makes this simple approach quite successful.
In 2021, Python is predicted to be one of the most widely used programming languages. Python is popular because it is easier to understand. Python may be used in a wide range of fields. Python is a dynamically typed language with a simple grammar. Python is an interpreted language, which means it evaluates code line by line, making it simple to spot problems. Python has more built-in functions, reducing the amount of code that needs to be written.

2.
Data types are an important notion in the Python programming language. In Python, each value has its own Python data type. The classification of information objects or the categorizing of data values into some type of data category are both examples of data types. It helps to understand the kind of operations that will be performed on a value.
Python supports a variety of data types. Each value in Python has a datatype. Because everything in Python programming is an object, data types are essentially classes, and variables are instances (objects) of these classes. Python supports a number of standard data types, each with its own storage technique.
A list of Python data types could look like this.
It's necessary to keep in mind that data type is a crucial concept in programming.
Variables can hold a wide range of information, and different types can perform different functions.
Python comes pre-installed with the following data types in these categories:
Set Types: frozenset, set (Sets are unordered.)
Mapping Type: dict (The mapping objects are used to map hash table values to arbitrary objects.)
Sequence Types: range, tuple, list
Binary Types: memoryview, bytearray, bytes
Boolean Type: bool
Numeric Types: complex, float, int
Text Type: str


3.
A function is a piece of code that is called from another piece of code and then executed. A function is a square of well-organized, reusable code that performs a single, connected task. Capacities provide greater application security and a high level of code reuse. When we need the same repeating steps in multiple portions of the program with various variable names, we employ it. We group the stages that repeat themselves into a function and call it as needed. The function will be able to process the data and return the result. The def keyword is used to define a function in Python, followed by the function name and a list of variable names/parameters enclosed in round parenthesis.
After processing, a function can return a value. In-built functions are already programmed in libraries/modules and can be imported by a programmer. max (), min (), and other functions can compute the maximum and minimum value of an inventory supplied as a parameter, for example. When we need a feature that isn't built in, we can create our own function. For example, if we want to convert temperature from Fahrenheit to Celsius, we can construct our own custom function that takes an argument and returns a result. Below is an example of a function that transforms a given amount of hours to minutes: def hours to Minutes (hours): 60 hours of return time

4.
Python is an interpreter, cooperative, and object-oriented programming language with a print statement. Python, according to the assertion, combines "amazing strength with very plain syntax," which should pique the interest of people who teach programming. The print () command prints a message to the screen or to a standard output device. The message can be a string or another object that will be converted to a string before being shown.
The print () function outputs the specified data to the standard yield gadget (screen) or the content stream record. That single piece of code has a print explanation that we use every day in our programming without even realizing its complexity. The print () articulation's purpose is to print the specified question to either the standard yield gadget or the content stream record.
objects: This means the question to be printed, * demonstrates that there can be more than one object.
sep: This means the division which would be between the diverse objects. By default, this esteem is ‘‘.
end: The esteem for this parameter is printed at last.
file: It ought to be a question with a write(str) strategy. In the event that this esteem isn't specified, it prints objects on the standard yield gadget, i.e., screen.
flush: The stream gets coercively flushed on the off chance that this esteem is Genuine. By default, this esteem is False.




Codes.

tup1 = ['Tom', 78]
tup1[1] = 90
print(tup1)

Output:
--------
['Tom', 90]

PART 1 CODE
print("New York Knicks!")
New York Knicks!

input()
computer science
Out[2]:
'computer science'

a = 6
if a == 6:
    # 4 indented spaces to this block of code
    print("a equals 6")
a equals 6


myString = 'New York Knicks'
print(type(myString))
<class 'str'>

n = 12
print(type(n))
<class 'int'>

n_float = 6.5
print(type(n_float))
<class 'float'>


single_string = 'It\'s a single quote string'
print(single_string) 
  File "<ipython-input-11-dbe7c6e4d27f>", line 1
    single_string = 'It's a single quote string'
                                        

double_string = "It's a double quote string"
print(double_string)
It's a double quote string


n1 = 6
n2 = 6.5
print(n1 + n2)

nstr1 = "abc"
print(nstr1 + str(n1))


nstr2 = "def"
print(nstr1 + nstr2)
abcdef



n1, n2 = 10, 11


In [24]:
n1
Out[24]:
10
In [25]:
n2
Out[25]:
11
In [27]:
result = 3 + 4.0 / 2 * 5  # DMAS
print(result)
13.0


# module operator %
remainder = 17%10
print(remainder)
7

# x ^ n
x = 5
n = 4
print(x ** n)
625


nstr = "abc"
ans = nstr * 10


print(len(ans))
30


name = "Gregory"
print("%s is a data scientist!" %name)
Gregory is a data scientist!

In [40]:
name.upper()
Out[40]:
'GREGORY'
In [41]:
name.lower()
Out[41]:
'gregory'

In [42]:
nstr = "Monday is a important day."
nstr.capitalize()
Out[42]:
'Monday is a important day.'
In [44]:
name.index('s')
Out[44]:
3
In [45]:
name[2:5]
Out[45]:
'rsh'
In [46]:
name[2:6:2]
Out[46]:
'rh'
In [47]:
alist = [3,4,5]
print(alist)
[3, 4, 5]
In [48]:
alist = ['gregory', 2, 5.5]
print(alist)
['gregory', 2, 5.5]
In [49]:
alist.append(10)
alist.append(15)
print(alist)
['gregory', 2, 5.5, 10, 15]
In [50]:
alist.pop()
print(alist)
['gregory', 2, 5.5, 10]
In [53]:
alist[3]
Out[53]:
10
In [54]:
alist[1:]
Out[54]:
[2, 5.5, 10]
In [55]:
alist.append([1,2,3])
print(alist)
['gregory', 2, 5.5, 10, [1, 2, 3]]
In [56]:
alist*2
Out[56]:
['gregory', 2, 5.5, 10, [1, 2, 3], 'gregory', 2, 5.5, 10, [1, 2, 3]]
In [57]:
alist + alist
Out[57]:
['gregory', 2, 5.5, 10, [1, 2, 3], 'gregory', 2, 5.5, 10, [1, 2, 3]]


PART 2 CODE

In [1]:
alist = ['Greg', 53, 'Carina', 6]
In [2]:
alist
Out[2]:
['Greg', 53, 'Carina', 6]
In [3]:
alist.append(help)
In [4]:
alist
Out[4]:
['Greg',
 53,
 'Carina',
 6,
 Type help() for interactive help, or help(object) for help about object.]
In [5]:
help()

In [6]:
blists = [
    ['Greg', 53],
    ['Carina', 6]
]
In [7]:
blists
Out[7]:
[['Greg', 53], ['Carina', 6]]
In [12]:
blists[-1]
Out[12]:
['Carina', 6]
In [13]:
blists[-2][0]
Out[13]:
'Greg'
In [14]:
blists.append(['Mak', 90])
blists
Out[14]:
[['Tom', 54], ['Julia', 78], ['Mak', 90]]
In [15]:
a = [0]*5
a
Out[15]:
[0, 0, 0, 0, 0]
In [16]:
a = [[0]*cols]*rows
In [18]:
cols = 5
rows = 4
dlist = [[1]*cols]*rows
In [19]:
dlist
Out[19]:
[[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]
In [23]:
# tuples
tup1 = ('Tom', 78)
tup1[1] = 90
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-23-c004c9ac7b5a> in <module>
      1 # tuples
      2 tup1 = ('Tom', 78)
----> 3 tup1[1] = 90

TypeError: 'tuple' object does not support item assignment
In [24]:
tup2 = ('Julia', 89)
tup1 + tup2
Out[24]:
('Tom', 78, 'Julia', 89)
In [25]:
tup1
Out[25]:
('Tom', 78)
In [26]:
tup3 = tup1 + tup2
In [27]:
tup3
Out[27]:
('Tom', 78, 'Julia', 89)
In [28]:
len(tup3)
Out[28]:
4
In [29]:
# dictionary
country_code = {'India': 1, 'USA': 2, 'China': 3}
print(country_code)
{'India': 1, 'USA': 2, 'China': 3}
In [30]:
print(country_code['China'])
3
In [31]:
country_code['UAE'] = 4
print(country_code)
{'India': 1, 'USA': 2, 'China': 3, 'UAE': 4}
In [33]:
'Inda' in country_code
Out[33]:
False
In [34]:
x = True
type(x)
Out[34]:
bool
In [35]:
1 == 2
Out[35]:
False
In [36]:
1 != 2
Out[36]:
True
In [38]:
a = 1
b = 2
print(a == b)
print(a > b)
print(a < b)
print(a != b)
False
False
True
True
In [39]:
color = 'red'
if color == 'red':
    print("Color is red!")
    
print("Color problem is solved!!")
Color is red!
Color problem is solved!!
In [42]:
color = 'kjh'
if color == 'red':
    print("Color is red!")
    
else:
    print("color is not red!")
    
print("Color problem is solved!!")
color is not red!
Color problem is solved!!
In [43]:
color = 'green'
if color == 'red':
    print("Color is red!")
    
elif color == 'green':
    print("Color is green!")
    
else:
    print("color is not red!")
    
print("Color problem is solved!!")
Color is green!
Color problem is solved!!
In [44]:
age = 15
if age >= 18:
    print("Adult")
    
else:
    print("Juvenile")
Juvenile
In [45]:
a = 0
not(a)
Out[45]:
True
In [46]:
a = 3
not(a)
Out[46]:
False
In [47]:
a = True
not(a)
Out[47]:
False
In [49]:
score = 76
percentile = 83

if score > 75 or percentile > 90:
    print("Admission successful!")
else:
    print("Try again next year")
Try again next year
In [51]:
range(5)
Out[51]:
range(0, 5)
In [52]:
for i in range(5):
    print(i)
0
1
2
3
4
In [54]:
for i in range(1, 10, 2):
    product = 8 * i
    print(product)
8
24
40
56
72
In [55]:
names = ('harshit', 'shubham', 'sahil')
for name in names:
    print(name.upper())
HARSHIT
SHUBHAM
SAHIL
In [56]:
age = [12,43,45,10]
i = 0
while i < len(age):
    if age[i] >= 18:
        print("Adult")
    else:
        print("Juvenile")
    i += 1
Juvenile
Adult
Adult
Juvenile
In [57]:
# list comprehension

cubes = [n** 3 for n in range(1,10)]
print(cubes)
[1, 8, 27, 64, 125, 216, 343, 512, 729]
In [58]:
cubes = []
for i in range(1,10):
    cubes.append(i ** 3)
print(cubes)
[1, 8, 27, 64, 125, 216, 343, 512, 729]
In [62]:
help(abs)
Help on built-in function abs in module builtins:

abs(x, /)
    Return the absolute value of the argument.

In [64]:
abs(2-5)
Out[64]:
3
In [65]:
def add_two_numbers(a, b):
    sum = a + b
    return sum
In [66]:
add_two_numbers(5,11)
Out[66]:
16
In [67]:
def fahr_to_celsius(temp):
    """
    This function converts temperature from fahrenheit
      to celsius.
      Args:
      -----
        tempInFahr: temperature in fahrenheit

      Returns:
      --------
        tempInCel: temperature in celsius
    """
    tempInCel = (temp - 32) * 5/9
    return tempInCel
In [68]:
fahr_to_celsius(50)
Out[68]:
10.0
